%! 

%%% A postscript about recursive fish.

%%% DRAWING PROCEDURES

% Consumes: 
%  [ primary-color [ r g b ] 
%    secondary-color [ r g b ] ]
/draw-efish {             % colors 
   
   newpath 

   aload pop              % pc sc

   % pc sc 

   0.007 setlinewidth
   1 setlinejoin

   % FISH BODY

   0.000  0.000 moveto 

  -0.250  0.250 lineto 

  -0.194  0.372 
  -0.132  0.452 
  -0.032  0.564 curveto 

  -0.056  0.730 
  -0.042  0.834 
   0.000  1.000 curveto 

   0.104  0.938 
   0.163  0.893 
   0.234  0.798 curveto 

   0.340  0.792 
   0.411  0.783
   0.500  0.750 curveto 

   0.500  0.250 lineto 

   0.589  0.217 
   0.660  0.208 
   0.766  0.202 curveto 

   0.837  0.107
   0.896  0.062 
   1.000  0.000 curveto 

   0.834  0.042
   0.730  0.056 
   0.564  0.032 curveto

   0.452  0.132
   0.372  0.194 
   0.250  0.250 curveto 

   0.000  0.000 lineto 

   closepath 

   % pc sc 

   % Fish body uses primary color.

   exch                      % sc pc
   aload                     % sc r g b pc 
   5 1 roll                  % pc sc r g b 

   setrgbcolor % pc          % pc sc  

   fill

   % Done with fish body.

   % pc sc 

   % FISH DETAILS 

   newpath 

   % MAIN SPINE 

   0.025  0.900 moveto 

   0.140  0.500 
   0.350  0.120 
   0.840  0.070 curveto 

   % LEFT FIN STEM 

  -0.015  0.520 moveto 

   0.040  0.400 
   0.120  0.300 
   0.210  0.260 curveto 

   % RIGHT FIN STEM 

   0.240  0.770 moveto 

   0.340  0.600 
   0.320  0.350 
   0.475  0.270 curveto

   % RIGHT FIN BOTTOM DELIMITER 

   0.377  0.377 moveto 

   0.495  0.495 lineto 

   % TAIL FIN STEM 

   0.430  0.165 moveto 

   0.480  0.175
   0.490  0.220 
   0.490  0.230 curveto 

   % TAIL FIN BOTTOM LINE

   0.452 0.178 moveto 

   0.510 0.130 
   0.540 0.110 
   0.600 0.080 curveto 

   % TAIL FIN TOP LINE 

   0.482 0.215 moveto 

   0.520 0.200
   0.600 0.160
   0.740 0.150 curveto 

   % LEFT FIN TOP LINE 

  -0.170 0.237 moveto 

  -0.125 0.355
  -0.065 0.405 
   0.010 0.480 curveto 

   % LEFT FIN MIDDLE LINE 
  
  -0.110 0.175 moveto 

  -0.060 0.250 
  -0.030 0.300 
   0.080 0.365 curveto 

   % LEFT FIN BOTTOM LINE 

  -0.045 0.115 moveto 

   0.010 0.180  
   0.060 0.230 
   0.170 0.280 curveto  

   % RIGHT FIN TOP LINE 
 
   0.270 0.700 moveto 

   0.340 0.720 
   0.426 0.710 
   0.474 0.692 curveto 

   % RIGHT FIN MIDDLE LINE 

   0.310 0.570 moveto 
   
   0.400 0.622 
   0.435 0.618 
   0.474 0.615 curveto  

   % RIGHT FIN BOTTOM LINE 

   0.350 0.435 moveto 

   0.400 0.505  
   0.422 0.520 
   0.474 0.538 curveto

   % Fish details use secondary color.

   % pc sc 

   aload                      % pc r g b sc 
   4 1 roll                   % pc sc r g b
   
   setrgbcolor % sc           % pc sc  

   stroke 

   % Done with fish details.


   % THE EYES

   % Outer eyes:
   % Use secondary color for outer eyes fill unless primary color is white.
   % Always stroke outer eyes with secondary color.
   
   % Inner eyes:
   % Use primary color for inner eyes fill unless primary color is white.

   % Is the primary color white?
   % Add r g b values, the value should be 3 for white.

   % pc sc 

   exch                      % sc pc 
   aload                     % sc r g b pc
   5 1 roll                  % pc sc r g b

   add add 3 eq              % pc sc
   {
     exch                    % sc pc 
   } if                      % ic oc 

   % LEFT EYE

   newpath

   0.004  0.800 moveto 

  -0.012  0.770 
  -0.017  0.685 
  -0.008  0.592 curveto 

   0.010  0.617 
   0.045  0.660 
   0.074  0.685 curveto

   0.068  0.696 
   0.040  0.772 
   0.004  0.800 curveto 

   closepath 

   gsave
   aload                     % ic r g b oc
   4 1 roll                  % ic oc r g b
   setrgbcolor % oc          % ic oc 
   fill 
   grestore 

   stroke 

   % RIGHT EYE

   newpath 

   0.095  0.870 moveto 

   0.090  0.830 
   0.095  0.775 
   0.115  0.715 curveto 

   0.140  0.740 
   0.165  0.760 
   0.205  0.782 curveto 

   0.200  0.790 
   0.160  0.840 
   0.095  0.870 curveto 

   closepath 

   gsave
   aload                     % ic r g b oc
   pop                       % ic r g b
   setrgbcolor % oc          % ic 
   fill 
   grestore 

   % outer eye stroke is always secondary color 

   stroke

   % INNER LEFT EYE

   % ic 

   aload pop                 % r g b

   setrgbcolor % ic          % (empty stack)

   newpath 

   0.018  0.720 moveto 

   0.010  0.700 
   0.005  0.685 
   0.008  0.618 curveto 

   0.010  0.622 
   0.035  0.652 
   0.057  0.674 curveto 

   0.053  0.684 
   0.038  0.708 
   0.018  0.720 curveto 

   closepath 

   fill

   % INNER RIGHT EYE 

   newpath 

   0.128  0.810 moveto 

   0.122  0.795 
   0.126  0.760 
   0.132  0.736 curveto 

   0.139  0.740
   0.154  0.756 
   0.185  0.774 curveto 

   0.174  0.783 
   0.150  0.805 
   0.128  0.810 curveto 

   closepath 

   fill

} def

%%% VECTOR PROCEDURES 

% [x y]
/vlength {
  aload pop      % x y
  dup mul        % x y*y
  exch           % y*y x
  dup mul        % y*y x*x
  add 
  sqrt 
} def 

% [x1 y1] [x2 y2]
/dotproduct {
  aload pop          % [x1 y1] x2 y2 
  3 -1 roll          % x2 y2 [x1 y1]
  aload pop          % x2 y2 x1 y1
  exch               % x2 y2 y1 x1 
  4 1 roll           % x1 x2 y2 y1
  mul                % x1 x2 y
  3 1 roll           % y x1 x2 
  mul                % y x 
  add                % dp
} def 

%% [x y] f -> [x' y'] where x' = x * f, y' = y * f 
/vscale {
  exch           % f [x y]
  aload pop      % f x y
  2 index        % f x y f 
  mul            % f x y', y' = y * f
  3 1 roll       % y' f x
  mul            % y' x', x' = f * x
  exch           % x' y'
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 + x2 y1 + y2
/vadd {
  aload pop      % [x1 y1] x2 y2
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2
  add            % y2 y1 x', x' = x1 + x2 
  3 1 roll       % x' y2 y1
  add            % x' y', y' = y2 + y1
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 - x2 y1 - y2
/vsub {
  aload pop      % [x1 y1] x2 y2 
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2 
  sub            % y2 y1 x', x' = x1 - x2
  3 1 roll       % x' y2 y1 
  exch           % x' y1 y2 
  sub            % x' y', y' = y1 - y2 
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x y] -> [x' y'] where x' = -x, y' = -y
/vneg {
  aload pop      % x y
  neg            % x -y
  exch           % -y x
  neg            % -y -x
  exch           % -x -y 
  2 array        % -x -y [. .]
  astore         % [-x -y] 
} def


%%% BOX PROCEDURES

%% (a + b, c, -b)
%% [ [xa ya] [xb yb] [xc yc] ]
/turn-box { 
  aload pop      % [xa ya] [xb yb] [xc yc]
  exch           % [xa ya] [xc yc] [xb yb]
  dup            % [xa ya] [xc yc] [xb yb] [xb yb]
  4 -1 roll      % [xc yc] [xb yb] [xb yb] [xa ya]
  vadd           % [xc yc] [xb yb] [xa+xb ya+yb]
  3 1 roll       % [xa+xb ya+yb] [xc yc] [xb yb]
  vneg           % [xa+xb ya+yb] [xc yc] [-xb -yb]
  3 array        % [xa+xb ya+yb] [xc yc] [-xb -yb] [. . .]
  astore         % [ [xa+xb ya+yb] [xc yc] [-xb -yb] ]
} def

%% (a + b, -b, c)
%% [ [xa ya] [xb yb] [xc yc] ]
/flip-box {
  aload pop      % [xa ya] [xb yb] [xc yc]
  exch           % [xa ya] [xc yc] [xb yb]
  dup            % [xa ya] [xc yc] [xb yb] [xb yb]
  vneg           % [xa ya] [xc yc] [xb yb] [-xb -yb]
  3 1 roll       % [xa ya] [-xb -yb] [xc yc] [xb yb] 
  4 -1 roll      % [-xb -yb] [xc yc] [xb yb] [xa ya]
  vadd           % [-xb -yb] [xc yc] [xa+xb ya+yb]
  3 1 roll       % [xa+xb ya+yb] [-xb -yb] [xc yc]
  3 array        % [xa+xb ya+yb] [-xb -yb] [xc yc] [. . .]
  astore         % [ [xa+xb ya+yb] [-xb -yb] [xc yc] ]
} def

%% (a’, b’, c’) = (a + (b + c) / 2, (b + c) / 2, (c − b) / 2)
%% [ [xa ya] [xb yb] [xc yc] ]
/toss-box {
  aload pop      % [xa ya] [xb yb] [xc yc]
  2 copy         % [xa ya] [xb yb] [xc yc] [xb yb] [xc yc] 
  exch           % [xa ya] [xb yb] [xc yc] [xc yc] [xb yb]
  vsub           % [xa ya] [xb yb] [xc yc] [xc-xb yc-yb]
  0.5 vscale     % [xa ya] [xb yb] [xc yc] [(xc-xb)/2 (yc-yb)/2]
  4 1 roll       % [(xc-xb)/2 (yc-yb)/2] [xa ya] [xb yb] [xc yc]
  vadd           % [(xc-xb)/2 (yc-yb)/2] [xa ya] [xb+xc yb+yc]
  0.5 vscale     % [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2]
  dup            % [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2] [(xb+xc)/2 (yb+yc)/2]
  4 1 roll       % [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2]
  vadd           % [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [xa+(xb+xc)/2 ya+(yb+yc)/2]
  3 1 roll       % [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2]
  3 array        % [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [. . .]
  astore         % [ [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] ]
} def

/move-box-v {      % bx f 
  exch             % f bx
  aload pop        % f a b c 
  dup              % f a b c c
  5 -1 roll        % a b c c f
  vscale           % a b c c'
  4 -1 roll        % b c c' a
  vadd             % b c a'
  3 1 roll         % a' b c 
  3 array astore   % [ a' b c ]
} def

/move-box-h {      % bx f
  exch             % f bx
  aload pop        % f a b c
  exch             % f a c b 
  dup              % f a c b b 
  5 -1 roll        % a c b b f
  vscale           % a c b b'
  4 -1 roll        % c b b' a 
  vadd             % c b a
  3 1 roll         % a c b 
  exch             % a b c 
  3 array astore   % [a' b c ]
} def

/scale-box-v {     % bx f 
  exch             % f bx 
  aload pop        % f a b c
  4 -1 roll        % a b c f
  vscale           % a b c'
  3 array astore   % [ a b c' ]  
} def 

/scale-box-h {       % bx f 
  exch             % f bx 
  aload pop        % f a b c 
  exch             % f a c b 
  4 -1 roll        % a c b f 
  vscale           % a c b'
  exch             % a b' c 
  3 array astore   % [ a b' c ]
} def

% a' = a + (0.1 * b + 0.1 * c) 
% b' = 0.8 * b
% c' = 0.8 * c 
/shrink-box {      % bx f 
  dup              % bx f f 
  3 1 roll         % f bx f 
  move-box-v       % f bx1 
  1 index          % f bx1 f
  move-box-h       % f bx2
  1 index          % f bx2 f 
  scale-box-v      % f bx3 
  exch             % bx3 f 
  scale-box-h      % bx4
} def 

/shrink-box-10th { 0.1 shrink-box } def 

%%% LENS PROCEDURES

% A "lens" is an array consisting of
%  - an array of color choices, with the current color "on top" (last)
%  - a box

% lens -> lens'
/turn-lens {            % lens
  aload pop             % colors box 
  turn-box              % colors box'
  2 array astore        % lens' 
} def 

% lens -> lens'
/flip-lens {
  aload pop             % colors box 
  flip-box              % colors box'
  2 array astore        % lens' 
} def 

% lens -> lens'
/toss-lens {
  aload pop             % colors box 
  toss-box              % colors box'
  2 array astore        % lens' 
} def 

% lens f -> lens' 
/move-lens-v {          % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  move-box-v            % colors box'
  2 array astore        % lens'
} def 

% lens f -> lens' 
/move-lens-h {          % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  move-box-h            % colors box'
  2 array astore        % lens'
} def 

% lens f -> lens' 
/scale-lens-v {         % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  scale-box-v           % colors box'
  2 array astore        % lens' 
} def 

% lens f -> lens' 
/scale-lens-h {         % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  scale-box-h           % colors box'
  2 array astore        % lens' 
} def 

% array -> array'
/rotate-array {         % arr
  aload                 % e1 e2 .. en-1 en arr
  length                % e1 e2 .. en-1 en n 
  [                     % e1 e2 .. en-1 en n [
  3 1 roll              % e1 e2 .. en-1 [ en n
  1 add                 % e1 e2 .. en-1 [ en n+1
  2 roll                % [ en e1 e2 .. en-1 
  ]                     % [ en e1 e2 .. en-1 ]
} def

% lens -> lens'
/rehue-lens {           % lens 
  aload pop             % colors box
  exch                  % box colors
  rotate-array          % box colors' 
  exch                  % colors' box 
  2 array astore        % lens
} def

/shrink-lens {          % lens f
  exch                  % f lens 
  aload pop             % f colors box 
  3 -1 roll             % colors box f 
  shrink-box            % colors box'
  2 array astore        % lens' 
} def 

%%% PICTURE PROCEDURES

% Consumes: a procedure that draws lines for a picture.
% Produces: a picture-procedure that consumes a box and draws a picture.
/create-picture {    % ls
  [ exch             % [ d 
    { 
      gsave
      exch           % d ls
      aload pop      % d cs bx 
      aload pop      % d cs a b c 
      3 -1 roll      % d cs b c a
      aload pop      % d cs b c xa ya

      %(translate) == 
      %2 copy == == 

      translate      % d cs b c 
      aload          % d cs b c xc yc c
      vlength        % d cs b c xc yc cl
      4 1 roll       % d cs cl b xc yc 
      exch atan      % d cs cl b ac

      %(c-angle) == 
      %dup == 

      exch           % d cs cl ac b
      aload          % d cs cl ac xb yb b
      vlength        % d cs cl ac xb yb bl
      4 1 roll       % d cs cl bl ac xb yb
      exch atan      % d cs cl bl ac ab

      %(b-angle) == 
      %dup == 

      dup            % d cs cl bl ac ab ab 
      3 1 roll       % d cs cl bl ab ac ab
      sub            % d cs cl bl ab da

      %(delta-angle) ==
      %dup == 

      dup 180 ge { 360 sub } if 

      dup -180 le { 360 add } if

      %(delta-angle') ==
      %dup == 

      dup abs div    % d cs cl bl ab x    | x = 1 or -1
      dup neg        % d cs cl bl ab x -x
      1 add 90 mul   % d cs cl bl ab x g  | g = 0 or 180
      3 -1 roll      % d cs cl bl x g ab
      add            % d cs cl bl x ang

      %(rotate) ==
      %dup == 

      rotate         % d cs cl bl x
      mul            % d cs cl bl'
      exch           % d cs bl' cl

      %(scale) ==
      %2 copy == ==

      scale          % d cs
      dup            % d cs cs
      length         % d cs n
      1 sub          % d cs n-1
      get            % c
      exch           % c d 
      exec           % 
      grestore       
    } /exec cvx 
  ] cvx 
} def 

%% picture -> picture
/turn {
  [                     % p [
    exch                % [ p
    /turn-lens cvx      % [ p turn-lens 
    exch                % [ turn-lens p 
    /exec cvx           % [ turn-lens p exec
  ] cvx                 % { turn-lens p exec }
} def

% picture -> picture
/flip {
  [                     % p [
  exch                  % [ p
  /exec                 % [ p /exec 
  cvx                   % [ p exec 
  /flip-lens            % [ p exec /flip-lens 
  cvx                   % [ p exec flip-lens
  3 1 roll              % [ flip-lens p exec
  ]                     % [ flip-lens p exec ]
  cvx                   % { flip-lens p exec }
} def

% picture -> picture
/toss {
  [                     % p [
  exch                  % [ p
  /exec                 % [ p /exec 
  cvx                   % [ p exec 
  /toss-lens            % [ p exec /toss-lens 
  cvx                   % [ p exec toss-lens
  3 1 roll              % [ toss-lens p exec
  ]                     % [ toss-lens p exec ]
  cvx                   % { toss-lens p exec }
} def

% Consumes: p1 p2 m n 
% Produces: p  
/above-ratio {
  [                     % lens * p1 p2 m n [
    5 1 roll            % lens [ p1 p2 m n
    {
      1 index           % lens p1 p2 m n m 
      add               % lens p1 p2 m t
      div               % lens p1 p2 f
      dup               % lens p1 p2 f f 
      1                 % lens p1 p2 f f 1
      exch              % lens p1 p2 f 1 f 
      sub               % lens p1 p2 f f'
      dup               % lens p1 p2 f f' f'
      3 1 roll          % lens p1 p2 f' f f'
      6 -1 roll         % p1 p2 f' f f' lens 
      dup               % p1 p2 f' f f' lens lens 
      7 1 roll          % lens p1 p2 f' f f' lens
      exch              % lens p1 p2 f' f lens f'  
      move-lens-v       % lens p1 p2 f' f lens'    (lens' = lens f' mv)
      exch              % lens p1 p2 f' lens' f 
      scale-lens-v      % lens p1 p2 f' lens1
      4 -1 roll         % lens p2 f' lens1 p1
      exec              % lens p2 f'
      exch              % lens f' p2 
      3 1 roll          % p2 lens f'
      scale-lens-v      % p2 lens2 
      exch              % lens2 p2 
      exec              %
    } /exec cvx 
  ] cvx
} def

/above {
  1 1 above-ratio
} def 

% Consumes: p1 p2 m n 
% Produces: p  
/beside-ratio {
  [                     % lens * p1 p2 m n [
    5 1 roll            % lens [ p1 p2 m n
    {
      1 index           % lens p1 p2 m n m 
      add               % lens p1 p2 m t
      div               % lens p1 p2 f
      dup               % lens p1 p2 f f 
      1                 % lens p1 p2 f f 1
      exch              % lens p1 p2 f 1 f 
      sub               % lens p1 p2 f f'
      exch              % lens p1 p2 f' f
      dup               % lens p1 p2 f' f f
      6 -1 roll         % p1 p2 f' f f lens
      dup               % p1 p2 f' f f lens lens 
      3 2 roll          % p1 p2 f' f lens lens f 
      scale-lens-h      % p1 p2 f' f lens lens1 
      6 -1 roll         % p2 f' f lens lens1 p1 
      exec              % p2 f' f lens 
      exch              % p2 f' lens f
      move-lens-h       % p2 f' lens'
      exch              % p2 lens' f'
      scale-lens-h      % p2 lens2 
      exch              % lens2 p2 
      exec 
    } /exec cvx 
  ] cvx
} def

/beside {
  1 1 beside-ratio 
} def 

/quartet {              % nw ne sw se
  beside                % nw ne s 
  3 1 roll              % s nw ne 
  beside                % s n 
  exch                  % n s
  above                 % p 
} def

% Consumes: w m e 
% Produces: p'
/row {                  % w m e
  beside                % w m 
  1 2 beside-ratio      % p'
} def

% Consumes: n m s 
% Produces: p'
/column {               % n m s 
  above                 % n ms
  1 2 above-ratio       % p'
} def

% Consumes: nw nm ne mw mm me sw sm se 
% Produces: p'
/nonet {
  row          % nw nm ne mw mm me s 
  7 1 roll     % s nw nm ne mw mm me
  row          % s nw nm ne m
  5 1 roll     % m s nw nm n 
  row          % m s n 
  3 1 roll     % n m s 
  column       % p'   
} def

% Consumes: p1 p2 
% Produces: p  
/over {
  [                % lens * p1 p2 [
    3 1 roll       % lens [ p1 p2 
    {              % lens p1 p2
      2 index      % lens p1 p2 lens 
      exch         % lens p1 lens p2 
      exec         % lens p1 
      exec         %
    } /exec cvx
  ] cvx
} def

% Consumes: p 
% Produces: p' 
/ttile-1 {
  dup                   % p p 
  toss flip rehue       % p pn
  dup                   % p pn pn  
  turn turn turn rehue  % p pn pe
  over over             % p'
} def

% Consumes: p 
% Produces: p' 
/ttile-2 {
  dup                        % p p 
  toss flip rehue rehue      % p pn
  dup                        % p pn pn  
  turn turn turn rehue rehue % p pn pe
  over over                  % p'
} def

% Consumes: p
% Produces: p'
/rehue {               
  [                     % lens * p [
    exch                % lens [ p
    {                   % lens p
      exch              % p lens
      rehue-lens        % p lens'
      exch              % lens' p 
      exec           %
    } /exec cvx
  ] cvx
} def

/utile-1 {
  toss flip                  % pn
  dup rehue turn             % pn pw
  dup rehue rehue turn       % pn pw ps 
  dup rehue turn             % pn pw ps pe 
  over over over             % p'
} def 

/utile-2 {
  toss flip rehue            % pn
  dup rehue rehue turn       % pn pw
  dup rehue rehue turn       % pn pw ps 
  dup rehue turn             % pn pw ps pe 
  over over over             % p'
} def 

/utile-3 {
  toss flip                  % pn
  dup rehue turn             % pn pw
  dup rehue turn             % pn pw ps 
  dup rehue rehue turn       % pn pw ps pe 
  over over over             % p'
} def 

% Consumes: p n 
% Produces: p'
/side-1 {
  dup               % p n n
  0 le              % p n, n <= 0
  {
    pop pop         % 
    /blank load     % blank
  } 
  {                 % p n, n > 1
    1 sub           % p n-1
    1 index         % p n-1 p
    exch            % p p n-1 
    side-1          % p s
    dup             % p s s 
    3 -1 roll       % s s p 
    ttile-1 rehue   % s s t 
    dup             % s s t t
    turn            % s s t t' 
    exch            % s s t' t 
    rehue           % s s t' t^
    quartet         % q
  } ifelse
} def 

% Consumes: p n 
% Produces: p'
/side-2 {
  dup               % p n n
  0 le              % p n, n <= 0
  {
    pop pop         % 
    /blank load     % blank
  } 
  {                 % p n, n > 1
    1 sub           % p n-1
    1 index         % p n-1 p
    exch            % p p n-1 
    side-2          % p s
    dup             % p s s 
    3 -1 roll       % s s p 
    ttile-2         % s s t 
    dup             % s s t t
    turn            % s s t t' 
    exch            % s s t' t 
    rehue rehue     % s s t' t^
    quartet         % q
  } ifelse
} def 

% Consumes: p n 
% Produces: p'
/corner-1 {
  dup            % p n n
  0 le           % p n, n <= 0
  {
    pop pop      % 
    /blank load  % blank
  } 
  {              % p n, n > 1
    1 sub        % p n-1
    1 index      % p n-1 p
    exch         % p p n-1 
    2 copy       % p p n-1 p n-1
    corner-1     % p p n-1 c 
    3 1 roll     % p c p n-1
    2 copy       % p c p n-1 p n-1
    side-1       % p c p n-1 s
    3 1 roll     % p c s p n-1 
    side-2 turn  % p c s-1 s-2' 
    4 -1 roll    % c s-1 s-2' p 
    utile-3      % c s-1 s-2' u
    quartet      % p'
  } ifelse
} def 

% Consumes: p n 
% Produces: p'
/corner-2 {
  dup            % p n n
  0 le           % p n, n <= 0
  {
    pop pop      %  
    /blank load  % blank
  } 
  {              % p n, n > 1
    1 sub        % p n-1
    1 index      % p n-1 p
    exch         % p p n-1 
    2 copy       % p p n-1 p n-1
    corner-2     % p p n-1 c 
    3 1 roll     % p c p n-1
    2 copy       % p c p n-1 p n-1
    side-2       % p c p n-1 s-2
    3 1 roll     % p c s-2 p n-1 
    side-1 turn  % p c s-2 s-1' 
    4 -1 roll    % c s-2 s-1' p 
    utile-2      % c s-2 s-1' u
    quartet      % p'
  } ifelse
} def 

% Consumes: p k
% Produces: p' 
/square-limit {
  1 index           % p k p 
  utile-1           % p k mmu
  3 1 roll          % mmu p k 
  2 copy            % mmu p k p k
  corner-1          % mmu p k nwc
  dup               % mmu p k nwc nwc
  5 1 roll          % nwc mmu p k nwc
  turn turn         % nwc mmu p k sec  
  3 1 roll          % nwc mmu sec p k
  2 copy            % nwc mmu sec p k p k 
  side-1            % nwc mmu sec p k nms
  dup               % nwc mmu sec p k nms nms  
  6 1 roll          % nwc nms mmu sec p k nms
  turn turn         % nwc nms mmu sec p k sms 
  4 1 roll          % nwc nms mmu sms sec p k
  2 copy            % nwc nms mmu sms sec p k p k 
  corner-2 turn     % nwc nms mmu sms sec p k swc 
  dup               % nwc nms mmu sms sec p k swc swc 
  turn turn         % nwc nms mmu sms sec p k swc nec 
  7 1 roll          % nwc nms nec mmu sms sec p k swc
  5 1 roll          % nwc nms nec mmu swc sms sec p k 
  side-2 turn       % nwc nms nec mmu swc sms sec wms 
  dup               % nwc nms nec mmu swc sms sec wms wms
  6 1 roll          % nwc nms nec wms mmu swc sms sec wms
  turn turn         % nwc nms nec wms mmu swc sms sec ems
  4 1 roll          % nwc nms nec wms mmu ems swc sms sec
  nonet             % p'
} def

%%% PICTURES

/blank { pop } def 

/fish /draw-efish load create-picture def 

%%% BOXES AND LENSES

/some-box [ [100 200] [250 0] [0 250] ] def

/big-box [ [50 200] [500 0] [0 500] ] def

/some-colors [ 
    [ [ 1 1 1 ] [ 0 0 0 ] ]         % white black
    [ [ 0.5 0.5 0.5 ] [ 1 1 1 ] ]   % grey white 
    [ [ 0 0 0 ] [ 1 1 1 ] ] ]       % black white 
def

/some-lens [ some-colors some-box ] def

/big-lens [ some-colors big-box ] def
