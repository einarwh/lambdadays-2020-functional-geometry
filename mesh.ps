%! 

%%% A postscript about code mesh.

%%% DRAWING PROCEDURES

% Consumes: 
%  [ primary-color [ r g b ] 
%    secondary-color [ r g b ] ]
/draw-mesh {             % colors 
   
   newpath 

   aload pop              % pc sc

   % pc sc 

   0.007 setlinewidth
   1 setlinejoin

   0.0  0.0 moveto 
   1.0  0.0 lineto 
   1.0  1.0 lineto 
   closepath 

   % pc sc 

   exch                      % sc pc
   aload pop                 % sc r g b

   gsave
   setrgbcolor % oc          % ic oc 
   fill 
   grestore 

   aload pop                 % r g b 
   setrgbcolor               % 

   stroke 
} def

%%% VECTOR PROCEDURES 

% [x y]
/vlength {
  aload pop      % x y
  dup mul        % x y*y
  exch           % y*y x
  dup mul        % y*y x*x
  add 
  sqrt 
} def 

% [x1 y1] [x2 y2]
/dotproduct {
  aload pop          % [x1 y1] x2 y2 
  3 -1 roll          % x2 y2 [x1 y1]
  aload pop          % x2 y2 x1 y1
  exch               % x2 y2 y1 x1 
  4 1 roll           % x1 x2 y2 y1
  mul                % x1 x2 y
  3 1 roll           % y x1 x2 
  mul                % y x 
  add                % dp
} def 

%% [x y] f -> [x' y'] where x' = x * f, y' = y * f 
/vscale {
  exch           % f [x y]
  aload pop      % f x y
  2 index        % f x y f 
  mul            % f x y', y' = y * f
  3 1 roll       % y' f x
  mul            % y' x', x' = f * x
  exch           % x' y'
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 + x2 y1 + y2
/vadd {
  aload pop      % [x1 y1] x2 y2
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2
  add            % y2 y1 x', x' = x1 + x2 
  3 1 roll       % x' y2 y1
  add            % x' y', y' = y2 + y1
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 - x2 y1 - y2
/vsub {
  aload pop      % [x1 y1] x2 y2 
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2 
  sub            % y2 y1 x', x' = x1 - x2
  3 1 roll       % x' y2 y1 
  exch           % x' y1 y2 
  sub            % x' y', y' = y1 - y2 
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x y] -> [x' y'] where x' = -x, y' = -y
/vneg {
  aload pop      % x y
  neg            % x -y
  exch           % -y x
  neg            % -y -x
  exch           % -x -y 
  2 array        % -x -y [. .]
  astore         % [-x -y] 
} def


%%% BOX PROCEDURES

%% (a + b, c, -b)
%% [ [xa ya] [xb yb] [xc yc] ]
/turn-box { 
  aload pop      % [xa ya] [xb yb] [xc yc]
  exch           % [xa ya] [xc yc] [xb yb]
  dup            % [xa ya] [xc yc] [xb yb] [xb yb]
  4 -1 roll      % [xc yc] [xb yb] [xb yb] [xa ya]
  vadd           % [xc yc] [xb yb] [xa+xb ya+yb]
  3 1 roll       % [xa+xb ya+yb] [xc yc] [xb yb]
  vneg           % [xa+xb ya+yb] [xc yc] [-xb -yb]
  3 array        % [xa+xb ya+yb] [xc yc] [-xb -yb] [. . .]
  astore         % [ [xa+xb ya+yb] [xc yc] [-xb -yb] ]
} def

/move-box-v {      % bx f 
  exch             % f bx
  aload pop        % f a b c 
  dup              % f a b c c
  5 -1 roll        % a b c c f
  vscale           % a b c c'
  4 -1 roll        % b c c' a
  vadd             % b c a'
  3 1 roll         % a' b c 
  3 array astore   % [ a' b c ]
} def

/move-box-h {      % bx f
  exch             % f bx
  aload pop        % f a b c
  exch             % f a c b 
  dup              % f a c b b 
  5 -1 roll        % a c b b f
  vscale           % a c b b'
  4 -1 roll        % c b b' a 
  vadd             % c b a
  3 1 roll         % a c b 
  exch             % a b c 
  3 array astore   % [a' b c ]
} def

/scale-box-v {     % bx f 
  exch             % f bx 
  aload pop        % f a b c
  4 -1 roll        % a b c f
  vscale           % a b c'
  3 array astore   % [ a b c' ]  
} def 

/scale-box-h {       % bx f 
  exch             % f bx 
  aload pop        % f a b c 
  exch             % f a c b 
  4 -1 roll        % a c b f 
  vscale           % a c b'
  exch             % a b' c 
  3 array astore   % [ a b' c ]
} def


%%% LENS PROCEDURES

% A "lens" is an array consisting of
%  - an array of color choices, with the current color "on top" (last)
%  - a box

% lens -> lens'
/turn-lens {            % lens
  aload pop             % colors box 
  turn-box              % colors box'
  2 array astore        % lens' 
} def 

% lens f -> lens' 
/move-lens-v {          % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  move-box-v            % colors box'
  2 array astore        % lens'
} def 

% lens f -> lens' 
/move-lens-h {          % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  move-box-h            % colors box'
  2 array astore        % lens'
} def 

% lens f -> lens' 
/scale-lens-v {         % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  scale-box-v           % colors box'
  2 array astore        % lens' 
} def 

% lens f -> lens' 
/scale-lens-h {         % lens f 
  exch                  % f lens  
  aload pop             % f colors box
  3 -1 roll             % colors box f 
  scale-box-h           % colors box'
  2 array astore        % lens' 
} def 

% array -> array'
/rotate-array {         % arr
  aload                 % e1 e2 .. en-1 en arr
  length                % e1 e2 .. en-1 en n 
  [                     % e1 e2 .. en-1 en n [
  3 1 roll              % e1 e2 .. en-1 [ en n
  1 add                 % e1 e2 .. en-1 [ en n+1
  2 roll                % [ en e1 e2 .. en-1 
  ]                     % [ en e1 e2 .. en-1 ]
} def

% lens -> lens'
/rehue-lens {           % lens 
  aload pop             % colors box
  exch                  % box colors
  rotate-array          % box colors' 
  exch                  % colors' box 
  2 array astore        % lens
} def

%%% PICTURE PROCEDURES

% Consumes: a procedure that draws lines for a picture.
% Produces: a picture-procedure that consumes a box and draws a picture.
/create-picture {    % ls
  [ exch             % [ d 
    { 
      gsave
      exch           % d ls
      aload pop      % d cs bx 
      aload pop      % d cs a b c 
      3 -1 roll      % d cs b c a
      aload pop      % d cs b c xa ya

      %(translate) == 
      %2 copy == == 

      translate      % d cs b c 
      aload          % d cs b c xc yc c
      vlength        % d cs b c xc yc cl
      4 1 roll       % d cs cl b xc yc 
      exch atan      % d cs cl b ac

      %(c-angle) == 
      %dup == 

      exch           % d cs cl ac b
      aload          % d cs cl ac xb yb b
      vlength        % d cs cl ac xb yb bl
      4 1 roll       % d cs cl bl ac xb yb
      exch atan      % d cs cl bl ac ab

      %(b-angle) == 
      %dup == 

      dup            % d cs cl bl ac ab ab 
      3 1 roll       % d cs cl bl ab ac ab
      sub            % d cs cl bl ab da

      %(delta-angle) ==
      %dup == 

      dup 180 ge { 360 sub } if 

      dup -180 le { 360 add } if

      %(delta-angle') ==
      %dup == 

      dup abs div    % d cs cl bl ab x    | x = 1 or -1
      dup neg        % d cs cl bl ab x -x
      1 add 90 mul   % d cs cl bl ab x g  | g = 0 or 180
      3 -1 roll      % d cs cl bl x g ab
      add            % d cs cl bl x ang

      %(rotate) ==
      %dup == 

      rotate         % d cs cl bl x
      mul            % d cs cl bl'
      exch           % d cs bl' cl

      %(scale) ==
      %2 copy == ==

      scale          % d cs
      dup            % d cs cs
      length         % d cs n
      1 sub          % d cs n-1
      get            % c
      exch           % c d 
      exec           % 
      grestore       
    } /exec cvx 
  ] cvx 
} def 

%% picture -> picture
/turn {
  [                     % p [
    exch                % [ p
    /turn-lens cvx      % [ p turn-lens 
    exch                % [ turn-lens p 
    /exec cvx           % [ turn-lens p exec
  ] cvx                 % { turn-lens p exec }
} def

% Consumes: p1 p2 m n 
% Produces: p  
/above-ratio {
  [                     % lens * p1 p2 m n [
    5 1 roll            % lens [ p1 p2 m n
    {
      1 index           % lens p1 p2 m n m 
      add               % lens p1 p2 m t
      div               % lens p1 p2 f
      dup               % lens p1 p2 f f 
      1                 % lens p1 p2 f f 1
      exch              % lens p1 p2 f 1 f 
      sub               % lens p1 p2 f f'
      dup               % lens p1 p2 f f' f'
      3 1 roll          % lens p1 p2 f' f f'
      6 -1 roll         % p1 p2 f' f f' lens 
      dup               % p1 p2 f' f f' lens lens 
      7 1 roll          % lens p1 p2 f' f f' lens
      exch              % lens p1 p2 f' f lens f'  
      move-lens-v       % lens p1 p2 f' f lens'    (lens' = lens f' mv)
      exch              % lens p1 p2 f' lens' f 
      scale-lens-v      % lens p1 p2 f' lens1
      4 -1 roll         % lens p2 f' lens1 p1
      exec              % lens p2 f'
      exch              % lens f' p2 
      3 1 roll          % p2 lens f'
      scale-lens-v      % p2 lens2 
      exch              % lens2 p2 
      exec              %
    } /exec cvx 
  ] cvx
} def

/above {
  1 1 above-ratio
} def 

% Consumes: p1 p2 m n 
% Produces: p  
/beside-ratio {
  [                     % lens * p1 p2 m n [
    5 1 roll            % lens [ p1 p2 m n
    {
      1 index           % lens p1 p2 m n m 
      add               % lens p1 p2 m t
      div               % lens p1 p2 f
      dup               % lens p1 p2 f f 
      1                 % lens p1 p2 f f 1
      exch              % lens p1 p2 f 1 f 
      sub               % lens p1 p2 f f'
      exch              % lens p1 p2 f' f
      dup               % lens p1 p2 f' f f
      6 -1 roll         % p1 p2 f' f f lens
      dup               % p1 p2 f' f f lens lens 
      3 2 roll          % p1 p2 f' f lens lens f 
      scale-lens-h      % p1 p2 f' f lens lens1 
      6 -1 roll         % p2 f' f lens lens1 p1 
      exec              % p2 f' f lens 
      exch              % p2 f' lens f
      move-lens-h       % p2 f' lens'
      exch              % p2 lens' f'
      scale-lens-h      % p2 lens2 
      exch              % lens2 p2 
      exec 
    } /exec cvx 
  ] cvx
} def

/beside {
  1 1 beside-ratio 
} def 

% Consumes: p1 p2 
% Produces: p  
/over {
  [                % lens * p1 p2 [
    3 1 roll       % lens [ p1 p2 
    {              % lens p1 p2
      2 index      % lens p1 p2 lens 
      exch         % lens p1 lens p2 
      exec         % lens p1 
      exec         %
    } /exec cvx
  ] cvx
} def

% Consumes: p
% Produces: p'
/rehue {               
  [                     % lens * p [
    exch                % lens [ p
    {                   % lens p
      exch              % p lens
      rehue-lens        % p lens'
      exch              % lens' p 
      exec           %
    } /exec cvx
  ] cvx
} def

%%% PICTURES

/blank { pop } def 

/mesh-se /draw-mesh load create-picture def 
/mesh-ne /mesh-se load turn def 
/mesh-nw /mesh-ne load turn def 
/mesh-sw /mesh-nw load turn def 

/mesh-fall /mesh-sw load /mesh-ne load over def 
/mesh-rise /mesh-se load /mesh-nw load over def 

/mesh-c 
  /mesh-se load 
  /mesh-fall load 
  /mesh-sw load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-fall load 
  /mesh-nw load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-fall load 
  /mesh-sw load beside 1 2 beside-ratio 
  /mesh-ne load 
  /mesh-rise load 
  /mesh-nw load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-o
  /mesh-se load 
  /mesh-rise load 
  /mesh-sw load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-fall load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-rise load 
  /mesh-fall load beside 1 2 beside-ratio 
  /mesh-ne load 
  /mesh-fall load 
  /mesh-nw load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-d
  /mesh-rise load 
  /mesh-rise load 
  /mesh-sw load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-fall load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-rise load 
  /mesh-fall load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-fall load 
  /mesh-nw load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-e3
  /mesh-rise load 
  /mesh-rise load 
  /mesh-nw load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-fall load 
  /mesh-sw load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-rise load 
  /mesh-nw load beside 1 2 beside-ratio 
  /mesh-fall load 
  /mesh-fall load 
  /mesh-sw load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-m
  /mesh-rise load 
  /mesh-sw load beside 
  /mesh-se load 
  /mesh-rise load beside 
  beside 
  /mesh-rise load
  /mesh-fall load beside 
  /mesh-rise load
  /mesh-fall load beside 
  beside 
  above 
  /mesh-fall load
  /mesh-rise load beside 
  /mesh-fall load
  /mesh-rise load beside 
  beside 
  /mesh-nw load
  /mesh-ne load beside 
  /mesh-nw load
  /mesh-ne load beside 
  beside 
  above 
  above 
def  

/mesh-e2
  /mesh-rise load 
  /mesh-rise load beside 
  /mesh-rise load
  /mesh-sw load beside 
  above 
  /mesh-fall load
  /mesh-nw load beside   
  /mesh-fall load
  /mesh-fall load beside 
  above 
  above 
def  

/mesh-s
  /mesh-se load 
  /mesh-rise load 
  /mesh-sw load beside 1 2 beside-ratio 
  /mesh-fall load 
  /mesh-fall load 
  /mesh-sw load beside 1 2 beside-ratio 
  above 
  /mesh-ne load 
  /mesh-rise load 
  /mesh-rise load beside 1 2 beside-ratio 
  /mesh-ne load 
  /mesh-fall load 
  /mesh-nw load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-h
  /mesh-rise load
  /blank load  
  /mesh-fall load beside 1 2 beside-ratio 
  /mesh-fall load 
  /mesh-fall load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-rise load 
  /mesh-rise load beside 1 2 beside-ratio 
  /mesh-fall load 
  /blank load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-l
  /mesh-fall load 
  /blank load beside 
  /mesh-fall load
  /blank load beside 
  above 
  /mesh-rise load
  /blank load beside   
  /mesh-fall load
  /mesh-rise load beside 
  above 
  above 
def  

/mesh-n
  /mesh-sw load
  /blank load  
  /mesh-fall load beside 1 2 beside-ratio 
  /mesh-rise load 
  /mesh-sw load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  /mesh-fall load 
  /mesh-rise load 
  /mesh-fall load beside 1 2 beside-ratio 
  /mesh-fall load 
  /mesh-ne load 
  /mesh-rise load beside 1 2 beside-ratio 
  above 
  above 
def  

/mesh-code 
  /mesh-c load 
  /blank load 
  3 1 beside-ratio
  /mesh-o load 
  4 3 beside-ratio 
  /blank load 
  7 1 beside-ratio 
  /mesh-d load 
  8 3 beside-ratio 
  /blank load 
  11 1 beside-ratio 
  /mesh-e3 load 
  12 3 beside-ratio 
def 

/mesh-mesh 
  /mesh-m load 
  /blank load 
  4 1 beside-ratio
  /mesh-e2 load 
  5 2 beside-ratio 
  /blank load 
  7 1 beside-ratio 
  /mesh-s load 
  8 3 beside-ratio 
  /blank load 
  11 1 beside-ratio 
  /mesh-h load 
  12 3 beside-ratio 
def 

/mesh-ldn 
  /mesh-l load 
  /blank load 
  2 1 beside-ratio
  /mesh-d load 
  3 3 beside-ratio 
  /blank load 
  6 1 beside-ratio 
  /mesh-n load 
  7 3 beside-ratio 
  /blank load 
  10 5 beside-ratio 
def

/code-mesh 
  /mesh-code load 
  /blank load 
  4 1 above-ratio 
  /mesh-mesh load 
  5 4 above-ratio 
def 

/code-mesh-ldn 
  /mesh-code load 
  /blank load 
  4 1 above-ratio 
  /mesh-mesh load 
  5 4 above-ratio
  /blank load 
  9 1 above-ratio 
  /mesh-ldn load rehue 
  10 4 above-ratio 
def 


%%% BOXES AND LENSES

/logo-box [ [50 200] [450 0] [0 270] ] def
/ldn-box [ [50 200] [450 0] [0 420] ] def

/some-colors [ 
    [ [ 1 1 1 ] [ 0 0 0 ] ]         % white black
    [ [ 0 0 0 ] [ 1 1 1 ] ] ]       % black white 
def

/. /erasepage cvx def 

/logo-lens [ some-colors logo-box ] def

/ldn-lens [ some-colors ldn-box ] def
